default.dol is some old debug build that seems to have just been ported from N64

it isn't compatible with the kioslk version's files

in some places it does things like:
li  r30, 0
lwz r0,  0x14(r30)
which makes me think either 1) it's built for a prototype devkit that allows accessing physical memory directly or 2) it needs some kind of dynamic relocation and these offsets are relative to something.
one such place is 0x8007B6C0 in allocTagged
another is        0x8007D7D0 also in allocTagged

I've been able to get it to almost start up by:
1) disable MMU emulation in Dolphin
2) put a blr at PPCHalt
3) disable the call to audioInit()
4) once it hangs, clear loadingFileFlags (it's waiting on TEX0.bin and TEX0.tab)
5) eventually it hangs in some EXI function
6) if bypassing that, it seems to get stuck trying to load an object in intersectModLineBuild
7) if we skip that we can get a green screen but it's stuck trying to use the textures it's missing

so I doubt this can be made to work with just patching but maybe with files from DP?

I think the audio crash was because of some Gecko codes being left on.
if I remove those it doesn't crash but does fail to load some audio files.
then it panics in DVDRead trying to read a file because its length is zero.

Memory segments are:
Name    Start    End      Length DolOffs
OSGlobl 80000000 800030FF   3100 ------
.text0  80003100 800054DF   23E0 000100
.data0  800054E0 80005E5F    980 2CA220
.data1  80005E60 80006CBF    E60 2CABA0
.text1  80006CC0 802CE9FF 2C7D40 0024E0
.data2  802CEA00 802CEA1F     20 2CBA00  pre_init_funcs
.data3  802CEA20 802CEA3F     20 2CBA20  some exit funcs
.data4  802CEA40 802D0D5F   2320 2CBA40
.data5  802D0D60 80325D1F  54FC0 2CDD60
uninit0 80325D20 803966FF  709E0 ------
.data6  80396700 8039823F   1B40 322D20
uninit1 80398240 8039A19B   1F5C ------
.data7  8039A1A0 803A417F   9FE0 324860

0x8007B6C0 is MAIN_.text1 + 0x074A00 (or +0x01D280 words)
0x8007D7D0 is MAIN_.text1 + 0x076B10 (or +0x01DAC4 words)
in the DOL file I find 074A00 at 0x2E0711, 0x2E0873, 0x31C020
01D280 is not found

in memory that's:
addr     offset              nearest label
802e3711 MAIN_.data5+0x129b1 802e2b60 referenced by salInitDsp
802e3873 MAIN_.data5+0x12b13 802e2b60
8031f020 MAIN_.data5+0x4e2c0 8031e720 seems to be a GameBit table, ref by DLL 26A func 04
so I doubt this is dynamic relocation data
the next entry should be 0x076B10 and I don't see that

07B6C0 isn't found in RAM either. so dynamic relocation seems out of the question.

also these actual instructions seem to be just loading something and sticking it on the stack where it goes unused. so they might just be a debug marker of some sort?
at 80000014 is zeros, it's part of the disc header but not a used part?
it's also possible the relocation data is in a different file (which might no longer exist)
this and/or the EXI stuff could even be some kind of protection like they used for their N64 dev carts

even if we can't get this running, the debug info is extremely useful


so after disabling the stray Gecko codes and importing the files from DP and disabling PPCHalt it seems to make progress but gets stuck in a loop spewing gibberish to the console
again it's stuck in some EXI function
it's waiting for 0x803982a0 to not be 0xA5FF005A
if I set it to zero then it's stuck in another loop at 8006157c (in a string formatter?)
looks like this function wants a callback in r3 and doesn't get one.
this is part of OSReport, from OSPrintContext, from defaultExceptionHandler, because it's jumped to 0x3dccccc9
so maybe this EXI function is trying to report the crash
it seems to be a stack overflow. the stack is full of this value.
I don't see how to find which thread it is directly but the context is at 803263a8
actually that is the thread, the context is first member of it
it seems to be a debug thread
if I disable its creation by putting a NOP at 80077d48 then it's hanging trying to parse a texture somewhere (around 800a4cdc)
and even disabling that function it's choking loading textures
"Failed assertion model->GCtextures[i] in "models_dolphin.c" on line 546."
so we'd need to figure out what's going wrong there.
is it not finding them or not understanding them?

most issues seem to stem from DLL 6 which is unknown
it exists in final but looks like it does something different
debug strings suggest it has to do with day/night cycle

the problem could even just be that these file sizes are zero.
loadDataFile is supposed to set the size from DVDOpen.

it's using rzip which is an older format... or at least it creates an "rzipheader" variable

the crash is happening trying to load a "frame" of a model.
I patched it to only load one frame.
now it tries to load object 0x13C0 which has a size of zero so it thinks it's out of memory
but that doesn't seem to matter.
then it gets stuck waiting for textures to load (loadingFileFlags)
if I manually clear the flag then it boots to the menu but with no textures (so it's all blank squares)

so why are the texture files not loading?
it's trying to load animtest
tex1.bin, tex1.tab, tex0.bin, tex0.tab are all loaded.

sometimes it does boot to the menu?
possibly a timing issue. if I disable OSPanic completely (instead of only PPCHalt) it loads up, but still no textures.
- probably because OSPanic disables interrupts. dur.

so let's start from fresh and check everything we need to patch.
memaddr  sectn offset dolofs data     changeto note
80009a60 text1 002DA0   5280 48001899 60000000 prevent disabling interrupts
80006cf8 text1 000038   2518 7C0004AC 4E800020 disable PPCHalt
80082e88 text1 07C1C8  7E6A8 8ABE005D 3AA00001 only load one frame of object (else we get sparsearray crash)
80082d90 text1 07C0D0 07E5B0 A01E0058 A01E0050 fix objData DLL offset
80082d94 text1 07C0D4 07E5B4 28000000 2800FFFF don't load DLL -1
80082d9c text1 07C0DC 07E5BC A07E0058 A07E0050 fix objData DLL offset
800d83ec text1 0D172C 0D3C0C 386000df -> 38600022 hack newstars
8007b7ec text1 074B2C 07700C 7C0803A6 4E800020 -> 8081FFE0 4BF87A60 clear memory on alloc
8009ac08 text1 093F48 096428 57DE023E 5720103A -> 3BDE0020 48000124 load uncompressed TEX0
I did the above in the DOL file

can also do:
80078178 text1 0714B8  73998 48000DD1 60000000 disable loading the map
800a4930 text1 09DC70  A0150 7C0802A6 4E800020 disable loading textures


the problem seems to be in GXInitTexObj which appears to be getting nonsense params
seems like only texture 0x2BD is loaded
so we need to work out what texture format it wants
it might be the same as final?
seems to possibly work, but it's loading from root dir
but then it errors not finding some files, even though they're present?
and it does still complain about bad texture formats.
having changed the files to final version, now it's complaining about missing files (which aren't missing) and if I disable the texture loading, it crashes entirely.
so maybe those are causing some memory corruption?
there's definitely some of that going on.

800000f0 03000000 to use extra RAM, but this doesn't help
seems like the filesystem doesn't get moved this way
need to hack Dolphin to do that... or the apploader? and bi2.bin
yeah that's all that was needed
it still crashes (and kills dolphin) with the DP assets
but when we disable loading the map it does reach the menu with garbled textures but then crashes

earlier we had let it load the map but prevented some of the map assets from loading?
just NOP at 8007901c (a texture init func) gets us to the menu.
and so does just replacing the texture files in both root and animtest with the kiosk files.
but replacing *all* files with those doesn't help. still texture format issues.
if the format is the same maybe the problem is the compression. I don't see any instance of ZLB in memory. so maybe it just can't decompress them?
so we could make a script that decompresses them all and builds new files out of those...
it doesn't load the DP assets either.

so should do that tomorrow...
actually, it looks for LZO, but changing that to ZLB doesn't make any difference. either the formats are different or there's something else.
there's only one instance of "LZO" in memory.
it also seems to look for headers of F0F0F0F0 as well as E0E0E0E0
the DP files don't have any LZO or ZLB header. binwalk does seem to believe they're compressed though.

might be worth quickly comparing the LZO and ZLB functions to see if they're at all compatible and maybe there's just some simple difference
or could we even just shove the entire zlbDecompress function in? it appears to depend on a lot of global/static variables though...
it looks like it does decompress a handful of textures fine, but fails on one of the font graphics at 800bf318 and a bunch of others (unless -1 means success?)

there is a fuckton of debug menu in here.

I made a script to repack as LZO but it seems like the game still can't decompress it. so I repacked as DIR instead.
it seems like the textures are expected to have a slightly different format within the file.
final adds 4 to the frame offset but this adds 12.

we need to convert the textures for root and animtest.
then it seems like it loads them okay but chokes trying to load some objects.
if I disable loading the map it seems to get further but eventually fails to find /TEX1.bin

it tries to call a NULL setup function on an object at 800947f4 and 80083eec
because it's reading some nonsense for the object data
it looks at field 0x68 which is a DLL pointer (same in both versions)
and calls the function at 0x04 of that
so the issue probably is the objects' DLL numbers don't match.

I've also now repacked (uncompressed) all the files I could in animtest (VOXMAP, MODELS, TEX0, TEX1) and also those same files in root. I did also try using OBJECTS.bin2 in place of OBJECTS.bin but that didn't do any good. I also removed all `.changed` files from root.

with any luck the DLLs are still ordered the same and I can just shim in something to add to the object's DLL ID.

but I'm not getting to the DLL Load Failed message (but that could mean it loaded OK but it's the wrong one)
if disabling map load it tries to allocate a negative size for a model
this is some ModelInstance stuff which the final version doesn't use
but this sugggests the model format is different
I tried copying in the MODELS.bin from DP and it isn't giving as many errors, but it does still corrupt memory and/or get stuck
seems like it gets to the menu but then dies
it does load animtest (map 5)
the very first object it tries to load has a bogus DLL ID (0x534b)
DLL ID is field 0x58 in objData, but in final it's 0x50
also it uses 0 to mean none while final uses -1
I patched it to use 0x50 and -1 and it seems to get to the menu but it's invisible
there don't seem to be any errors except two "multiple texture fail"s
if I patch it to consider all textures as having one frame (800a4a70 -> 3b800001) then the menu is visible but still gibberish textures
with 0 frames it's visible with blank textures and no error
the second option is a texture viewer, you can press L to change background color, but no textures are showing up, it crashes often trying to free null textures
if I copy the texture files from DP it rejects them because of wrong checksum
the problem might be that TEXTABLE.bin isn't correct? unless that's only for animation.
after setting up a few textures it's again getting garbage data
this is at 800bd47c where it's setting up some environment effect textures
if we disable that whole function, or the initShaders() call entirely, we get memory filled with FF
but why is this garbage?
it might not be, the formats it wrote are there... is it expecting allocTagged() to return a zeroed buffer?
the heaps do get zeroed, and I don't see another write until it reaches that function, and there's garbage. so it's DMA from somewhere. maybe loading some larger-than-expected file? this is freshly allocated, so there's no guarantee it's zeroed since it could have already been used before. so this could even be a bug?

one thing we could do is patch allocTagged to zero the memory.
8007b7ec 7C 08 03 A6  mtspr     LR,r0
8007b7f0 4E 80 00 20  blr
all we would need is to jump to memclr @ 8000324c with r4=len.
it will return r3=dest.

8000324c 7C 08 02 A6  mfspr     r0,LR
80003250 90 01 00 04  stw       r0,local_res4(r1)
so if we replace the last 2 instructions with setting r4 and jumping to 80003250 (second instruction of memclr) it should work.

8007b6a0 90 61 00 08  stw       size,0x08(r1)
8007b7e8 38 21 00 28  addi      r1,r1,0x28  so we need lwz r4, -0x20(sp)

so patch is: 8007b7ec 8081FFE0 4BF87A60 and ghidra even recognizes this as inserting memset(dest,0,size) before the return
but there must be an invalid alloc somewhere because although it works, eventually memory gets zeroed out, and dolphin doesn't even notice lol because of course breakpoints no longer work
at 800a4c00 it's trying to alloc negative size for a texture, apparently because tex0getFrame gave bogus size
seems newstars dll tries to load texture 0xDF which isn't present
800d83ec 386000df -> 38600022 to avoid that (it loads that texture just before, so should be fine)
with that plus the mem clear patch we once again get invisible menu

what we really need is to hack the allocator to stop on bogus sizes (see below)
doing that we get nothing, but if we prevent loading the map we get 8007df00 trying to alloc a bogus size for a model
with memory clear we get the invisible menu again

so with all the DOL patches and file conversions we're at the point that we can load to the menu but it's invisible
I set Dolphin to dump textures and we get a single 512x1 transparent image
it wants texture 0x25D for the debug text but that's not loaded
for that matter neither are textures 1, 2
these are the same IDs as final so we should just need to give it a texture file that has those
doing that we get it not invisible but still the textures are 1px high
before the texture header it wants a word telling the total data size.
if it's zero it moves forward until one isn't zero

there's another problem: TEX0 must be compressed. only TEX1 can be uncompressed. it doesn't check and just tries to decompress anyway.

rather than trying to figure out this LZO variant we can patch it to allow DIR
8009ac08 48000078  b 8009ac80
then we need to figure out why it refuses to copy anything
because it... doesn't. it only returns the pointer.
so, we could also patch it to jump to 8009AD30 which does copy.
8009ac08 48000128  b 0x8009AD30
but not quite because there's the header

8009ac08 3BDE0020  addi      r30,r30,0x20
8009ac0c 48000124  b         LAB_8009ad30
IT WORKS! but we still can't do much because it can't load other assets.
some others don't work uncompressed either, eg MODELS.bin
but we could hack lzoDecompress to just copy
but this won't work in all cases because it checks for the LZO signature.
we'd have to hack it to check for a special signature at the start of the actual data.

some suggest using lzo1x_decompress but that's not available for python
it can be found online though but no documentation of course

r3=src r4=compLen r5=dest r6=rawLen
800a0dd8 94 21 FF D0  stwu      r1,local_30(r1)  # beginning of lzoDecompres
redirect somewhere... b 0x80003520
at 80003520:
stwu      r1,-0x30(r1) # replaced
lwz       r7, 0(r3)
lis       r8, 0x5265
ori       r8, r8, 0x6E61
cmpw      r7, r8
beq       0x8000353C #.skip
b         0x800a0dd8 # back to lzoDecompress
.skip:  (8000353C)
addi      r4, r3,  4 # src
or        r3, r5, r5 # dest
addi      r5, r6, -4 # len
mflr      r15
bl        0x8000346c # memcpy
mtlr      r15
b         0x800a11cc # end of lzoDecompress

800a0dd8 4B F6 27 48  b         LAB_80003520
80003520 94 21 FF D0  stwu      r1,-0x30(r1)
80003524 80 E3 00 00  lwz       r7,0x0(r3)
80003528 3D 00 52 65  lis       r8,0x5265
8000352c 61 08 6E 61  ori       r8,r8,0x6e61
80003530 7C 07 40 00  cmpw      r7,r8
80003534 41 82 00 08  beq       LAB_8000353c
80003538 48 09 D8 A0  b         lzoDecompress
8000353c 38 83 00 04  addi      r4,r3,0x4
80003540 7C A3 2B 78  or        r3,r5,r5
80003544 38 A6 FF FC  addi      r5,r6,-4
80003548 7D E8 02 A6  mfspr     r15,LR
8000354c 4B FF FF 21  bl        memcpy
80003550 7D E8 03 A6  mtspr     LR,r15
80003554 48 09 DC 78  b         LAB_800a11cc

hex((0x800a0dd8 - 0x80006CC0) + 0x24E0) => 0x9c5f8
hex((0x80003520 - 0x80003100) + 0x100)  =>   0x520
let's patch that in.

but it does need to also store the outLen


next step is figuring out map loading.
it seems to be expecting a different MAPS.BIN format.
dimensions at 0x1C instead of 0x00
nope, that's number of blocks and unknown 1E, same as final

also, I don't think the C buttons work. I wonder if it would work with an N64 controller plugged into a GC-USB adapter?


bogus alloc detect: (will segfault dolphin if you don't breakpoint)
8007b690 7C 08 02 A6  mfspr     r0,LR -> jump to somewhere
80001798 is available but maybe not ideal for a permanent patch
80003510 is part of metroTRK buffer, should be usable; text0+0x410, so 0x510 in DOL
jump to 8007b694

80003510 7C 08 02 A6  mfspr     r0,LR
srwi r6, r3, 24
cmpwi r6, 0
bne 0x80006efc # a random OSPanic
b   8007b694

too bad ghidra doesn't know what srwi is
rlwinm  r6,  r18, 32-14, 0x0003 # table idx
rlwinm. r5,  r4,  4,     0xF # r5 = (r4 >> 28) & 0xF
so here:
rlwinm  r6,  r3,  32-24, 0xFF
rlwinm  r6,  r3,  8, 0xFF
but it probably won't understand that shorthand either so we need to split the mask into start/end: (also it's zero-based)
rlwinm  r6,  r3,  31-24, 31-7, 31-0
rlwinm  r6,  r3,  8, 24, 31

and also we can't beq that far, and no need for cmp

final code is:
8007b690 4B F8 7E 80  b         LAB_80003510
80003510 7C 08 02 A6  mfspr     r0,LR
80003514 54 66 46 3F  rlwinm.   r6,r3,0x8,0x18,0x1f
80003518 40 82 39 E4  bne       LAB_80006efc
8000351c 48 07 81 78  b         LAB_8007b694

8007b690 text1 + 0x749d0 => 0x76eb0
80003510 text0 + 0x410   => 0x510

0x77d10 7C0802A6 => 4BF87E80
0x510   0000...  => 7C 08 02 A6 54 66 46 3F 40 82 39 E4 48 07 81 78

FULL BOOT LOG without OSPanic text:
================================================================================
Dolphin OS $Revision: 36 $.
Kernel built : May 22 2001 01:47:06
Console Type : Development HW3
Memory 48 MB
Arena : 0x803b4180 - 0x817edf40
app booted from bootrom
__ARChecksize(): Initializing for RevB+ SDRAM controller...
ARInit(): ARAM size        : 16777216 bytes
ARInit(): USER Base address: 0x00004000
ARInit(): Refresh          : 0x009C
AIInit(): DSP is 32KHz
Entering sndInit()

Entering hwInit()

MusyX AI interface initialized.
salInitAi() is done.

Allocated dspCmdList.

Allocated surround buffer.

Allocated HW voice array.

Allocated ITD buffers for voice array.

Initializing voice 0...
Initializing voice 1...
Initializing voice 2...
Initializing voice 3...
Initializing voice 4...
Initializing voice 5...
Initializing voice 6...
Initializing voice 7...
Initializing voice 8...
Initializing voice 9...
Initializing voice 10...
Initializing voice 11...
Initializing voice 12...
Initializing voice 13...
Initializing voice 14...
Initializing voice 15...
Initializing voice 16...
Initializing voice 17...
Initializing voice 18...
Initializing voice 19...
Initializing voice 20...
Initializing voice 21...
Initializing voice 22...
Initializing voice 23...
Initializing voice 24...
Initializing voice 25...
Initializing voice 26...
Initializing voice 27...
Initializing voice 28...
Initializing voice 29...
Initializing voice 30...
Initializing voice 31...
Initializing voice 32...
Initializing voice 33...
Initializing voice 34...
Initializing voice 35...
Initializing voice 36...
Initializing voice 37...
Initializing voice 38...
Initializing voice 39...
Initializing voice 40...
Initializing voice 41...
Initializing voice 42...
Initializing voice 43...
Initializing voice 44...
Initializing voice 45...
Initializing voice 46...
Initializing voice 47...
Initializing voice 48...
Initializing voice 49...
Initializing voice 50...
Initializing voice 51...
Initializing voice 52...
Initializing voice 53...
Initializing voice 54...
Initializing voice 55...
Initializing voice 56...
Initializing voice 57...
Initializing voice 58...
Initializing voice 59...
Initializing voice 60...
Initializing voice 61...
Initializing voice 62...
Initializing voice 63...
All voices initialized.

Initializing studio 0...
Initializing studio 1...
Initializing studio 2...
Initializing studio 3...
Initializing studio 4...
Initializing studio 5...
Initializing studio 6...
Initializing studio 7...
All studios are initialized.

Default studio is active.

HRTF history buffer is allocated.

salInitDspCtrl() is done.

salInitDsp() is done.

Starting AI DMA...

hwInit() done.


MusyX software initialization...
Build Date: May 23 2001 01:16:54

MusyX ARAM handler initialized
MusyX logic is initialized.

Leaving sndInit().

AISetStreamSampleRate(): OBSOLETED. Only 48KHz streaming from disk is supported!
Warning: DVDOpen(): file '/audio/starfox.poo' was not found under /.
dvdLoadFile: Couldn't open file '/audio/starfox.poo'
Warning: DVDOpen(): file '/audio/starfox.pro' was not found under /.
dvdLoadFile: Couldn't open file '/audio/starfox.pro'
Warning: DVDOpen(): file '/audio/starfox.sdi' was not found under /.
dvdLoadFile: Couldn't open file '/audio/starfox.sdi'
Warning: DVDOpen(): file '/audio/starfox.sam' was not found under /.
dvdLoadFile: Couldn't open file '/audio/starfox.sam'

No. fonts :: 6

game data: 6060
game data padding: 2124
game checksum: 8
game options: 28
game options padding: 8156
game checksum: 8
 Creatiung Di Display List  Display 1  Display 1  Finished Di Display List mainChangeMap(1,0,0)
$$$$$  CHANGEMAP
piDVDCallbacktextab33 4000
piDVDCallbackTextab33 ------ CHECKSUM  0x8be8  REALSUM 0x8be8
Objects out of ram(1) !!
piDVDCallbacktex2tab36 400
piDVDCallbackTex2tab36 ------ CHECKSUM  0xf24d  REALSUM 0xf24d
doDayAction
objSetupObjectActual objtype out of range 1575/1455
objSetupObjectActual objtype out of range 1576/1455
objSetupObjectActual objtype out of range 1577/1455
objSetupObjectActual objtype out of range 1578/1455
objSetupObjectActual objtype out of range 1579/1455
objSetupObjectActual objtype out of range 1580/1455

--- END OF BOOT LOG ---

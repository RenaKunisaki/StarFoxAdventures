so with the C patches this was booting to a menu
but I did a stupid and restored the files from kiosk version and now it crashes on loading the map
but I also didn't keep track of what was changed so maybe it's for the best.

### log of file changes ###
- copy DP files over root (not over dirs)
- copy kiosk/files/animtest/* into root and animtest (overwrite)
- rename audio/starfoxm.* to audio/starfox.*
- ensure all files are padded to a multiple of 32 bytes

also the C patch sets up the BATs to make address 0 accessible, so no need to disable MMU anymore.

I copied DP files back in over the root (not over any dirs)
it chokes on loading the map ROM list because it wants to read the compressed size of a FACEFEED header from MAPS.bin, but this MAPS.bin doesn't have those.
so let's restore the kiosk MAPS.bin/tab
still crashing, but on textures now
let's copy kiosk/TEX* too... no change
one thing I notice is there's no TEXPRE

the kiosk texture files are ZLB
the main issue appears to be that this version expects TEX1 to be uncompressed.
previously we fixed that by repacking them uncompressed.

actually TEX1 is ZLB too but I don't see where it's decompressing?
it seems like the biggest difference is that the final checks, if TEX1.bin isn't loaded, it'll load it
otherwise, it seems to handle it the same

it's decompressed by loadAndDecompressDataFile()
the issue seems to just be that it's checking for the ZLB signature (or in this case, the LZO signature)
this seems to be the only such check (at least, using that particular instance of the string) so let's just change it to "ZLB"
and also let's actually replace those lzoDecompress() calls
but it's not even reaching those
at 80099b5c it's getting some bogus offset and reading a bogus size after many, many calls
this is for TEX0
maybe best thing is to patch in there and have it check for the signature and/or valid size

it seems like clearing memory when it's allocated prevents that (the patch I had added to do that was being bypassed, oops)
but now it hangs in heapAlloc()
so I hooked perfAllocTagged() too, revealing a bad alloc size for an object list
it scans OBJECTS.tab for an entry of -1
it uses that to determine the number of object types and allocates a buffer for them
the count is 0x541
then it uses the last entry (0x03CFC4) plus 0x10 as the alloc size
but it gets some bogus value, as if the file is corrupted or incomplete?
seems because it's not padded to a multiple of 32 bytes, the end gets cut off.
so I wrote a script to pad all files, and it gets further, then chokes on a texture file again.
so let's replace the texture files under animtest
now the menu loads, but with corrupted graphics
or if I restore the newstars hack it dies: "objSetupObjectActual objtype out of range 1580/1466"
1580 = 0x62C
that also happens if I copy the rest of file files into animtest
but if I do that *and* the newstars hack it loads with corrupted graphics again
it seems to be random whether it does that or not.

so for the corrupted textures I think we fixed that before by repacking them because it refuses to decompress some? (TEX0)
but it looks like it does
no, the problem before was it *requires* TEX0 to be compressed, not DIR.

I'm now suspecting I was working on a pre-patched default.dol
after copying the original back in (as the patch source) it crashes
loading texture 021B, decompress() at 80540310
part of newday, 800d4324
there's a texture here so I don't see why it would fail
disabling that function doesn't help either
it's crashing inside the ZLB decompress so great, who knows what's up there
probably related to the fucking gigantic table
should try to compress that (lol) or load it from disc
- I moved it to disc but it doesn't seem to help.
- but it seems like that table is modified on the fly, so it might not be necessary to actually load it. we can probably just alloc an empty buffer.
could try to copy the assembly but it's not so simple to get in a usable format.

the problem is just that it's being a butt and not using the GOT for reasons
or maybe it is but something else is going wrong
seems to be just an out of control loop
maybe because the static tables aren't being initialized correctly...
lmao of course it can't be that easy

I managed to shoehorn zlib into it and it *seems* to be working
but it loves to crash in various ways
I set Dolphin to dump textures and there are none
it consistently crashes at 800AE2AC (some trk_texanim function) with DSI error
again a bogus pointer, seems like a negative size
if I disable that function then it crashes in objGetModelInstance()
that suggests it doesn't understand the object file format and/or model file
it did load one texture (the background image) which suggests that's working

just before the crash there:
objects.c: Failed assertion object->modelno>=0 && object->modelno<object->objdata->noframes
and that's even if I don't make it only load one frame
and happens with both DP and kiosk versions of OBJECTS and MODELS
it doesn't seem to be just that the model is out of range, also the obj's model pointer is wrong

we did have to convert MAPS before
with the DP MAPS it gives different errors about lights and perspective mtxs
or maybe it just does that every time now with any files
that was from disabling loading the map

it doesn't understand object files from either version.
kiosk:
00000000  00 00 00 00  3F 80 00 00  00 00 00 A0  00 00 00 A4   .... ?... .... ....
00000010  00 00 00 A4  00 00 00 00  00 00 00 00  00 00 00 00   .... .... .... ....
00000020  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 C0   .... .... .... ....
00000030  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   .... .... .... ....
00000040  00 00 00 00  00 00 00 24  00 00 00 00  00 00 00 00   .... ...$ .... ....
00000050  FF FF 00 00  00 01 00 07  44 75 6D 6D  79 4F 62 6A   .... .... Dumm yObj
00000060  65 63 74 00  00 00 00 00  00 00 00 00  00 00 FF FF   ect. .... .... ....
00000070  00 00 00 00  00 00 0A 00  00 01 00 00  FF FB 00 0A   .... .... .... ....
00000080  00 00 00 00  00 00 00 00  FF FF FF FF  FF FF FF FF   .... .... .... ....
00000090  FF FF FF FF  00 00 00 00  00 00 00 00  02 00 00 00   .... .... .... ....
000000A0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   .... .... .... ....
000000B0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   .... .... .... ....

DP:
00000000  00 00 00 00  3D CC CC CD  00 00 00 AC  00 00 00 B0   .... =... .... ....
00000010  00 00 00 B0  00 00 00 00  00 00 00 00  00 00 00 00   .... .... .... ....
00000020  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 B0   .... .... .... ....
00000030  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   .... .... .... ....
00000040  00 00 00 00  00 00 00 24  00 00 00 00  00 00 FF 9C   .... ...$ .... ....
00000050  00 0A 03 00  02 00 00 00  00 00 00 00  00 01 00 44   .... .... .... ...D
00000060  75 6D 6D 79  4F 62 6A 65  63 74 00 00  00 00 00 06   ummy Obje ct.. ....
00000070  00 00 00 00  00 00 00 00  FF FF 00 00  00 00 FF 00   .... .... .... ....
00000080  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   .... .... .... ....
00000090  0A 00 00 01  FF FB 00 0A  00 00 00 00  00 00 00 00   .... .... .... ....
000000A0  FF FF FF FF  FF FF FF FF  FF FF FF FF  00 00 03 E9   .... .... .... ....

it seems to expect the latter judging by 8018dd7c
I've now gone and copied ALL files from DP into root, and further copied MODELS into animtest, then overwritten TEX0 and TEX1 with the kiosk ones.
now we get a lot of "texture no xxxx out of range", then an invalid alloc size in mapGetRomListAndOffsets
that seems to go away if I actually remember to pad the files afterward.
then it's back to the objGetModelInstance crash.
it seems like it's actually getting a NULL object.
from 800d97d8 which is in DLL 0A, something to do with clouds
we can disable that by writing 1 to u8 0x80399b8a
then we have the menu but the textures aren't loaded

also all this was being done with audioInit() skipped because it hangs.
it gives fewer errors if we use starfoxm instead of starfoxs
but then it hangs in some TRK function? nope, my fault, fucked up calling audioInit.

so the menu is working but without any textures loaded except the background and placeholder colourful squares.
copying kiosk/TEXTABLE.bin into root doesn't help.
the log shows it is loading textures 1, 2, 25D which are the text
and I don't see those texture out of range errors anymore
so why aren't they loading? well it seems like they really aren't here.
we need kiosk/animtest/TEX* not kiosk/TEX*
now it works!
model viewer crashes though, invalid alloc size
and loading a map crashes:
800b0750->800b072c| OSPanic: track_dolphin.c: Failed assertion blockSize==block->size
800b0d70->800b0d2c| OSPanic: track_dolphin.c: Failed assertion block->waterRenderStream>=blockBase && block->waterRenderStream<blockEnd
and then tries to decompress a texture to address 0
since it's track_dolphin, let's try kiosk maps
this function deals with BLOCKS so let's use those first... same result

so where we stand now... the textures work, it boots to the menu but can't load maps or models.
I've been decoding the format of the various map block structures.

maps.tab:
0000 infoOffset
0038 blockTable
0188 rects1
0428 rects2
06C8 rects3
0774 rects4
0774 romlist (zeros)
0780 infoOffset

infoOffset:
000C 0007 width, height
0006 0005 origin X, Y
00AC 0000 0000 0000 0000 0000 0000 0000 0000 0000 0005 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000

blockTable: 10 80 00 7F repeated (mod=16 sub=64 ?=127)

but does it expect other data to be in this file?
it seems to expect E0E0E0E0 or F0F0F0F0 and does lzoDecompres
    F0 means uncompressed
it seems like MAPS.BIN might be a different format too? maybe only 2 rect sets instead of 4.
field 1E of infoOffset seems to be the count of some 0x10-byte items (or pairs of items?)

it might be easier to work on DP decomp until we can get the map structs there figured out

so after some coaxing Dolphin is now showing ALL of the log...
80048afc->80048ab8| OSPanic: synthdata.c: Sample ID to be inserted could not be found in any sample directory.m
TEX0 data[80628D04]: 00000001 00000100 0000006D 58856360 offs 00000100
80025d18->80025cf4| OSPanic: GXTexture.c: GXInitTexObj: width too large
80025d3c->80025d18| OSPanic: GXTexture.c: GXInitTexObj: height too large
80025da4->80025d6c| OSPanic: GXTexture.c: GXInitTexObj: width must be a power of 2
80025df4->80025db4| OSPanic: GXTexture.c: GXInitTexObj: height must be a power of 2
80025e20->80025e04| OSPanic: GXTexture.c: GX Internal: Register field out of range
80025e4c->80025e20| OSPanic: GXTexture.c: GX Internal: Register field out of range
80025f58->80025f20| OSPanic: GXTexture.c: GX Internal: Register field out of range
80025f94->80025f58| OSPanic: GXTexture.c: GX Internal: Register field out of range
80025954->80025928| OSPanic: GXTexture.c: GX: invalid texture format
805407d4->80009968| LoadAsset texture 0001 to 803B40FC

now if only I could make it stop repeating every OSReport.


it looks like this version expects the ModelFileHeader to be directly at the beginning of the Model struct, instead of a pointer to it.
in fact it looks like what we call ModelFileHeader is what it calls Model, and what we call Model is what it calls ModelInstance.

model->vertexPositions>=modelBase && model->vertexPositions<modelEnd
model->vertexTexCoords>=modelBase && model->vertexTexCoords<modelEnd
model->renderStream>=modelBase && model->renderStream<modelEnd
model->displayLists>=modelBase && model->displayLists<modelEnd
this is odd since these fields are in the same place...
well they're all zero
it tries to load a model from offset 0 in MODELS.BIN which has a FACEFEED header
but seems like that should be fine, but it's not loading?
it's model 0x4B7 which is indeed not present in animtest
according to models.xml it might not be present anywhere
so it gets 0 as the offset and loads the first model which is a dummy, and complains that it has no vertices and etc
0x4E8 (Krystal) it won't even load because it considers that beyond max model number
1 (Fox) it doesn't decode properly

17:21:008 Core/HLE/HLE_OS.cpp:40 E[OSREPORT_HLE]: 80070854->80070808| OSPanic: sparsearray.c: Failed assertion keyPtr<sparseArray->endPtr
this seems like the array is corrupted
if I disable storing to it, it proceeds to try to load more models which are missing, but eventually hangs

the corruption is from loading MAPS.bin in track_getdim()
we can probably fix this by just increasing some buffer sizes

final:
  trk_cblocks = allocTagged(0x100,TRACK_COL,NULL);
  trk_blknos = allocTagged(0x80,TRACK_COL,NULL);
  trk_blkusage = allocTagged(0x40,TRACK_COL,NULL);
  trk_tempbuf = allocTagged(0xd48,TRACK_COL,NULL);
  trk_blkmaps[0] = allocTagged(0x500,TRACK_COL,NULL);
  trk_entrymaps[0] = allocTagged(0x3c00,TRACK_COL,NULL);
  trk_vismap = allocTagged(0x500,TRACK_COL,NULL);

old:
  trk_cblocks = allocTagged(0xa0,TRACK_COL,s_trk:cblocks_802f2c0c);
  trk_blknos = allocTagged(0x50,TRACK_COL,s_trk:blknos_802f2c18);
  trk_blkusage = allocTagged(0x28,TRACK_COL,s_trk:blkusage_802f2c24);
  trk_mapinfo = allocTagged(0x20,TRACK_COL,s_trk:mapinfo_802f2c34);
  trk_tempbuf = allocTagged(700,TRACK_COL,s_trk:tempbuf_802f2c40);
  trk_blkmaps[0] = allocTagged(0x500,TRACK_COL,s_trk:blkmaps_802f2c4c);
  trk_entrymaps[0] = allocTagged(0x3c00,TRACK_COL,s_trk:entrymaps_802f2c58);
  trk_vismap[0] = allocTagged(0x500,TRACK_COL,s_trk:vismap_802f2c68);

at some point it triggers a BSOD but for whatever reason we can't see it.
Dolphin refuses to notice the screen being redraw.
maybe this is because it's not drawing to the frame buffer but to 0x0800_0000.
perhaps this was made for old hardware that had a fixed framebuffer address?
it calls OSPhysicalToUncached to get 0xC800_0000 which is near GX regs...
(someone suggested this is designed for the official emulator which might work like that?)

I've patched that to draw to the actual frame buffer but Dolphin still won't see it.
I don't know why so I'll patch debugPrintfxy to just OSReport
that lets us at least see the error, which is at 800d9744
PC	800d9744
SP	803b40c8
Stack trace
800a7328
80078c70
80078378
80077d0c
800031ec
part of updateEnvironment
if we disable that it crashes in some newday function
if we also disable that, we seem to actually reach the menu, but can't see it.
mashing A did briefly show us something. looks like BSOD is almost working...
after some tinkering it "works" but flashes horribly.
anyway mashing A crashes again probably because the map can't be loaded.

why can't we see the menu? it seems like it loads textures okay.
wasn't there an issue before with them actually not existing in animtest? (no)
but using gamefront files doesn't help either
didn't they have a different header format?
it manages to load textures 25D, 0, 1 which are the debug text so I don't know why it's not showing up
the menu is drawing, I don't know why it's invisible (not even corrupted graphics)
the render function is getting called
enabling texture dumping, it looks like only one 8x8 texture gets loaded?
strange since the log shows many more (but are any successful?)

it looks like the text just isn't being printed into the buffer properly?
like, the set color/pos functions add an extra null byte? but even if I disable them entirely, it's still not showing up.
the actual character render function is being called so the problem is just they aren't showing up.
whether this is because the textures are broken or something else...?
looks like every texture is only 8x8
according to TEXTABLE.BIN texture 0x25D should be entry 3
which is 81000840 in TEX0.TAB -> 0x1080 in TEX0.BIN
which is a ZLB header
looks like the texture should be loading fine...
even if I use the swaphol texture files instead, it's 8x8
seems like the image is actually not there?
size is 0x1260, much too big for 8x8
but this isn't the size it's seeing...
...because 'make install' doesn't copy the modified files over.
after fixing that it's seeing the right size but something is clobbering RAM.
seems to be starting around 80530d90 and it's caused by the hooked lzoDecompress
the data looks okay...

TEX0: Decompress 805EA470 (len 0x6C6) to 813579E0
Decompress ZLB (len 1734 -> 4704) from 805EA470 to 813579E0
the log all looks fine but something just goes out of control in the decompression
bizarre since this worked before
not caused by the texture hooks either
maybe the ZLB decompresser we copied is broken... IIRC previously we decompressed it externally.
it's copied directly from SFA so maybe it didn't decompile properly
zlib doesn't seem to handle it either
seems like a difference in how gcc deals with shifting by negative amounts
by ensuring we don't do that we now have some textures loading but they're garbled

maybe it's easier to try to copy the assembly (lolno)

so with some more fuckery I managed to get zlib working and now we're finally back to having a working menu, but without recompressing anything.
except, disabling the sky removes the blue menu background. if we re-enable it, it shows the background but freezes with no menu.

I tried copying over OBJECTS.bin2 as OBJECTS.bin, that didn't help anything.
looks like it reads object's control number (whatever that is) from a bogus offset.
the final version has this array but doesn't use it.
I patched it to always return 0
this seems to be an index into a list of preset ObjDefs

if I copy DP's files (except textures) it crashes.

it gets as far as loadCharacter but dies inside it
in intersectModLineBuild
loadModLine returns null
MODLINES.tab is 0xC0 bytes

old:
	0x76 s16 modLineCount, modLineNo
new:
	0x5C s8 modLineCount, modLineNo
changing this doesn't help
I can change it to not load modlines at all but then it gets nonsense model data
looks like it doesn't understand the FACEFEED header
so I added that and a bunch of others to my decompresser and now it can try to load them
then it's failing on the polygons and animation data, probably offsets changed again.

OSPanic: models_dolphin.c: Failed assertion model->GCpolygons>=modelBase && model->GCpolygons<modelEnd
OSPanic: models_dolphin.c: Failed assertion model->polygonGroups>=modelBase && model->polygonGroups<modelEnd
Load model instance 0xFFFFD380 (0x2C80)
OSPanic: models_dolphin.c: Failed assertion modelNum>=0 && modelNum<maxModelNum
makeModelAnimation() size mismatch!! (0,-13)
ANIMBANK overflow

old:
  0x44	0x4	addr	undefined *	GCpolygons
  0x48	0x4	PolygonGroup *	PolygonGroup *	polygonGroups
new:
  0x5c	0x4	addr	pointer
  0x60	0x4	ModelHeaderField60 *	ModelHeaderField60 *

next it's choking on animations; I got it loading correct model numbers and getting the polygons from them

800889ec is another place that's accessing obviously wrong fields
